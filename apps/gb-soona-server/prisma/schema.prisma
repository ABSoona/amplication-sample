datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Aide {
  contact          Contact            @relation(fields: [contactId], references: [id])
  contactId        Int
  createdAt        DateTime           @default(now())
  crediteur        EnumAideCrediteur?
  dateAide         DateTime?
  dateExpiration   DateTime?
  frequence        EnumAideFrequence?
  id               Int                @id @default(autoincrement())
  infosCrediteur   String?
  montant          Int?
  nombreVersements Int?
  remarque         String?
  suspendue        Boolean?
  typeField        EnumAideTypeField?
  updatedAt        DateTime           @updatedAt
}

model Demande {
  agesEnfants              String?
  apl                      Int?
  autresAides              String?
  autresCharges            Int?
  categorieDemandeur       EnumDemandeCategorieDemandeur?
  contact                  Contact                        @relation(fields: [contactId], references: [id])
  contactId                Int
  createdAt                DateTime?                      @default(now())
  dateVisite               DateTime?
  demandeStatusHistories   DemandeStatusHistory[]
  dettes                   Int?
  documents                Document[]
  facturesEnergie          Int?
  id                       Int                            @id @default(autoincrement())
  loyer                    Int?
  natureDettes             String?
  nombreEnfants            Int?
  remarques                String?
  revenus                  Int?
  revenusConjoint          Int?
  situationFamiliale       String?
  situationProConjoint     String?
  situationProfessionnelle String?
  status                   String?
  updatedAt                DateTime                       @updatedAt
}

model Contact {
  adresse         String?
  age             Int?
  aides           Aide[]
  codePostal      Int?
  createdAt       DateTime   @default(now())
  dateCreation    DateTime?
  dateVisite      DateTime?
  demandes        Demande[]
  documents       Document[]
  email           String?
  id              Int        @id @default(autoincrement())
  nom             String?
  numBeneficiaire String?
  prenom          String?
  remarques       String?
  status          String?
  telephone       String?
  updatedAt       DateTime   @updatedAt
  ville           String?
}

model User {
  createdAt                   DateTime                     @default(now())
  email                       String?                      @unique
  firstName                   String?
  id                          String                       @id @default(cuid())
  lastName                    String?
  password                    String
  role                        String?
  roles                       Json
  status                      String?
  token                       String?
  updatedAt                   DateTime                     @updatedAt
  userNotificationPreferences UserNotificationPreference[]
  username                    String                       @unique
}

model Document {
  contact        Contact?      @relation(fields: [contactId], references: [id])
  contactId      Int?
  contenu        Json?
  createdAt      DateTime      @default(now())
  demande        Demande?      @relation(fields: [demandeId], references: [id])
  demandeId      Int?
  id             String        @id @default(cuid())
  typeDocument   TypeDocument? @relation(fields: [typeDocumentId], references: [id])
  typeDocumentId Int?
  updatedAt      DateTime      @updatedAt
}

model UserNotificationPreference {
  active    Boolean
  createdAt DateTime                                @default(now())
  id        Int                                     @id @default(autoincrement())
  typeField EnumUserNotificationPreferenceTypeField
  updatedAt DateTime                                @updatedAt
  user      User                                    @relation(fields: [userId], references: [id])
  userId    String
}

model TypeDocument {
  createdAt DateTime   @default(now())
  documents Document[]
  id        Int        @id @default(autoincrement())
  updatedAt DateTime   @updatedAt
}

model DemandeStatusHistory {
  createdAt DateTime @default(now())
  demande   Demande  @relation(fields: [demandeId], references: [id])
  demandeId Int
  id        Int      @id @default(autoincrement())
  status    String
  updatedAt DateTime @updatedAt
}

enum EnumAideCrediteur {
  LeBNFiciaire
  UnCrAncier
}

enum EnumAideFrequence {
  Mensuelle
  BiMensuelle
  Trimestrielle
  Hebdomadaire
  Unefois
}

enum EnumAideTypeField {
  Alimentaire
  FinanciRe
}

enum EnumDemandeCategorieDemandeur {
  LourdementEndett
  NCessiteux
  Pauvre
}

enum EnumUserNotificationPreferenceTypeField {
  NouvelleDemande
  DemandeEnVisite
  DemandeEnCommission
  ContactBan
  AideExpir
  ErreursDemandes
}
